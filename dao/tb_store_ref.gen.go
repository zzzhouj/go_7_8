// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"filesys/model"
)

func newStoreRef(db *gorm.DB, opts ...gen.DOOption) storeRef {
	_storeRef := storeRef{}

	_storeRef.storeRefDo.UseDB(db, opts...)
	_storeRef.storeRefDo.UseModel(&model.StoreRef{})

	tableName := _storeRef.storeRefDo.TableName()
	_storeRef.ALL = field.NewAsterisk(tableName)
	_storeRef.ID = field.NewInt32(tableName, "id")
	_storeRef.StoreKey = field.NewString(tableName, "store_key")
	_storeRef.RefCount = field.NewInt32(tableName, "ref_count")
	_storeRef.Ctime = field.NewInt32(tableName, "ctime")
	_storeRef.Mtime = field.NewInt32(tableName, "mtime")

	_storeRef.fillFieldMap()

	return _storeRef
}

type storeRef struct {
	storeRefDo storeRefDo

	ALL      field.Asterisk
	ID       field.Int32
	StoreKey field.String
	RefCount field.Int32
	Ctime    field.Int32
	Mtime    field.Int32

	fieldMap map[string]field.Expr
}

func (s storeRef) Table(newTableName string) *storeRef {
	s.storeRefDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s storeRef) As(alias string) *storeRef {
	s.storeRefDo.DO = *(s.storeRefDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *storeRef) updateTableName(table string) *storeRef {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.StoreKey = field.NewString(table, "store_key")
	s.RefCount = field.NewInt32(table, "ref_count")
	s.Ctime = field.NewInt32(table, "ctime")
	s.Mtime = field.NewInt32(table, "mtime")

	s.fillFieldMap()

	return s
}

func (s *storeRef) WithContext(ctx context.Context) IStoreRefDo { return s.storeRefDo.WithContext(ctx) }

func (s storeRef) TableName() string { return s.storeRefDo.TableName() }

func (s storeRef) Alias() string { return s.storeRefDo.Alias() }

func (s storeRef) Columns(cols ...field.Expr) gen.Columns { return s.storeRefDo.Columns(cols...) }

func (s *storeRef) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *storeRef) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["store_key"] = s.StoreKey
	s.fieldMap["ref_count"] = s.RefCount
	s.fieldMap["ctime"] = s.Ctime
	s.fieldMap["mtime"] = s.Mtime
}

func (s storeRef) clone(db *gorm.DB) storeRef {
	s.storeRefDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s storeRef) replaceDB(db *gorm.DB) storeRef {
	s.storeRefDo.ReplaceDB(db)
	return s
}

type storeRefDo struct{ gen.DO }

type IStoreRefDo interface {
	gen.SubQuery
	Debug() IStoreRefDo
	WithContext(ctx context.Context) IStoreRefDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStoreRefDo
	WriteDB() IStoreRefDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStoreRefDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStoreRefDo
	Not(conds ...gen.Condition) IStoreRefDo
	Or(conds ...gen.Condition) IStoreRefDo
	Select(conds ...field.Expr) IStoreRefDo
	Where(conds ...gen.Condition) IStoreRefDo
	Order(conds ...field.Expr) IStoreRefDo
	Distinct(cols ...field.Expr) IStoreRefDo
	Omit(cols ...field.Expr) IStoreRefDo
	Join(table schema.Tabler, on ...field.Expr) IStoreRefDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStoreRefDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStoreRefDo
	Group(cols ...field.Expr) IStoreRefDo
	Having(conds ...gen.Condition) IStoreRefDo
	Limit(limit int) IStoreRefDo
	Offset(offset int) IStoreRefDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStoreRefDo
	Unscoped() IStoreRefDo
	Create(values ...*model.StoreRef) error
	CreateInBatches(values []*model.StoreRef, batchSize int) error
	Save(values ...*model.StoreRef) error
	First() (*model.StoreRef, error)
	Take() (*model.StoreRef, error)
	Last() (*model.StoreRef, error)
	Find() ([]*model.StoreRef, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StoreRef, err error)
	FindInBatches(result *[]*model.StoreRef, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StoreRef) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStoreRefDo
	Assign(attrs ...field.AssignExpr) IStoreRefDo
	Joins(fields ...field.RelationField) IStoreRefDo
	Preload(fields ...field.RelationField) IStoreRefDo
	FirstOrInit() (*model.StoreRef, error)
	FirstOrCreate() (*model.StoreRef, error)
	FindByPage(offset int, limit int) (result []*model.StoreRef, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStoreRefDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s storeRefDo) Debug() IStoreRefDo {
	return s.withDO(s.DO.Debug())
}

func (s storeRefDo) WithContext(ctx context.Context) IStoreRefDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s storeRefDo) ReadDB() IStoreRefDo {
	return s.Clauses(dbresolver.Read)
}

func (s storeRefDo) WriteDB() IStoreRefDo {
	return s.Clauses(dbresolver.Write)
}

func (s storeRefDo) Session(config *gorm.Session) IStoreRefDo {
	return s.withDO(s.DO.Session(config))
}

func (s storeRefDo) Clauses(conds ...clause.Expression) IStoreRefDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s storeRefDo) Returning(value interface{}, columns ...string) IStoreRefDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s storeRefDo) Not(conds ...gen.Condition) IStoreRefDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s storeRefDo) Or(conds ...gen.Condition) IStoreRefDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s storeRefDo) Select(conds ...field.Expr) IStoreRefDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s storeRefDo) Where(conds ...gen.Condition) IStoreRefDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s storeRefDo) Order(conds ...field.Expr) IStoreRefDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s storeRefDo) Distinct(cols ...field.Expr) IStoreRefDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s storeRefDo) Omit(cols ...field.Expr) IStoreRefDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s storeRefDo) Join(table schema.Tabler, on ...field.Expr) IStoreRefDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s storeRefDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStoreRefDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s storeRefDo) RightJoin(table schema.Tabler, on ...field.Expr) IStoreRefDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s storeRefDo) Group(cols ...field.Expr) IStoreRefDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s storeRefDo) Having(conds ...gen.Condition) IStoreRefDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s storeRefDo) Limit(limit int) IStoreRefDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s storeRefDo) Offset(offset int) IStoreRefDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s storeRefDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStoreRefDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s storeRefDo) Unscoped() IStoreRefDo {
	return s.withDO(s.DO.Unscoped())
}

func (s storeRefDo) Create(values ...*model.StoreRef) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s storeRefDo) CreateInBatches(values []*model.StoreRef, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s storeRefDo) Save(values ...*model.StoreRef) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s storeRefDo) First() (*model.StoreRef, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreRef), nil
	}
}

func (s storeRefDo) Take() (*model.StoreRef, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreRef), nil
	}
}

func (s storeRefDo) Last() (*model.StoreRef, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreRef), nil
	}
}

func (s storeRefDo) Find() ([]*model.StoreRef, error) {
	result, err := s.DO.Find()
	return result.([]*model.StoreRef), err
}

func (s storeRefDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StoreRef, err error) {
	buf := make([]*model.StoreRef, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s storeRefDo) FindInBatches(result *[]*model.StoreRef, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s storeRefDo) Attrs(attrs ...field.AssignExpr) IStoreRefDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s storeRefDo) Assign(attrs ...field.AssignExpr) IStoreRefDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s storeRefDo) Joins(fields ...field.RelationField) IStoreRefDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s storeRefDo) Preload(fields ...field.RelationField) IStoreRefDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s storeRefDo) FirstOrInit() (*model.StoreRef, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreRef), nil
	}
}

func (s storeRefDo) FirstOrCreate() (*model.StoreRef, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreRef), nil
	}
}

func (s storeRefDo) FindByPage(offset int, limit int) (result []*model.StoreRef, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s storeRefDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s storeRefDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s storeRefDo) Delete(models ...*model.StoreRef) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *storeRefDo) withDO(do gen.Dao) *storeRefDo {
	s.DO = *do.(*gen.DO)
	return s
}
