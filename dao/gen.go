// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q        = new(Query)
	File     *file
	Session  *session
	StoreRef *storeRef
	User     *user
	Version  *version
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	File = &Q.File
	Session = &Q.Session
	StoreRef = &Q.StoreRef
	User = &Q.User
	Version = &Q.Version
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:       db,
		File:     newFile(db, opts...),
		Session:  newSession(db, opts...),
		StoreRef: newStoreRef(db, opts...),
		User:     newUser(db, opts...),
		Version:  newVersion(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	File     file
	Session  session
	StoreRef storeRef
	User     user
	Version  version
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:       db,
		File:     q.File.clone(db),
		Session:  q.Session.clone(db),
		StoreRef: q.StoreRef.clone(db),
		User:     q.User.clone(db),
		Version:  q.Version.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:       db,
		File:     q.File.replaceDB(db),
		Session:  q.Session.replaceDB(db),
		StoreRef: q.StoreRef.replaceDB(db),
		User:     q.User.replaceDB(db),
		Version:  q.Version.replaceDB(db),
	}
}

type queryCtx struct {
	File     IFileDo
	Session  ISessionDo
	StoreRef IStoreRefDo
	User     IUserDo
	Version  IVersionDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		File:     q.File.WithContext(ctx),
		Session:  q.Session.WithContext(ctx),
		StoreRef: q.StoreRef.WithContext(ctx),
		User:     q.User.WithContext(ctx),
		Version:  q.Version.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
